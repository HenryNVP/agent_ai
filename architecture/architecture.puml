@startuml architecture
title AI Strategic Planning Tool Architecture
skinparam componentStyle rectangle
skinparam shadowing false
skinparam packageStyle rectangle
skinparam defaultFontName Arial

'=== UI Layer ===
package "Client / Presentation Layer" as UI {
  [Chat Interfaces (LLM)] as CHAT
  [Web App (Dashboard, Approvals)] as WEB
  [API Gateway] as APIGW
}

'=== Service Layer ===
package "Service Layer" as SVC {
  [Conversation Orchestrator\n(Function Calling / Tool Use)] as ORCH
  [Agent Service (LLM + Tools)] as AGENT
  [Decision & Governance Service\nExplainability, Approvals, Monitoring] as GOV
}

'=== Analysis Layer ===
package "Analysis Layer" as ANA {
  [Optimization Service\n] as OPT
  [Scenario & Robustness\n(EMA Workbench)] as EMA
  [Rules Engine\n(Accreditation, Budget guard)] as RULES
}

'=== Knowledge Layer ===
package "Knowledge Layer" as KNOW {
  [Vector DB (RAG Search)\n] as VDB
  [Knowledge Graph + KPI Store\n] as KG
}

'=== Data Layer ===
package "Data / Ingestion Layer" as DATA {
  [ETL / ELT Orchestrator\n] as ETL
  [Internal Systems\n(SIS, ERP, Finance, HR)] as INT
  [External Sources\n(IPEDS, Accreditation PDFs,\nCompetitor Sites)] as EXT
}

'=== Flows ===
CHAT --> APIGW
WEB --> APIGW
APIGW --> AGENT
APIGW --> GOV
APIGW --> ORCH

AGENT --> OPT
AGENT --> EMA
AGENT --> RULES
AGENT --> VDB
AGENT --> KG
ORCH --> AGENT

OPT --> KG
EMA --> KG
RULES --> KG

ETL --> KG
ETL --> VDB
INT --> ETL
EXT --> ETL

'=== Legend ===
legend bottom
== Architecture Styles Applied ==
• Client–Server - Web UI ↔ API Gateway
• Layered - Data → Knowledge → Analysis → Service → UI
• Service-Oriented - Independent services (Agent, Optimizer, EMA, Rules, Governance)
• Pipe & Filter - ETL pipeline (extract → transform → load)
• Batch Sequential - ETL jobs
• Parallel Processing - EMA scenario runs, Optimization solvers
• Framework Layer - LangChain/LangGraph for agent orchestration
endlegend

@enduml
